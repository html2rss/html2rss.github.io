{"0": {
    "doc": "About html2rss",
    "title": "About html2rss",
    "content": "html2rss is an open-source project dedicated to empowering you to take control of your web content. In an age where traditional RSS feeds are often missing, html2rss provides a robust and flexible solution to convert almost any HTML content into a structured RSS format. Started in 2018, the project has evolved into a comprehensive suite of tools designed to help you create and consume RSS feeds effortlessly. ",
    "url": "/about",
    
    "relUrl": "/about"
  },"1": {
    "doc": "About html2rss",
    "title": "Our Vision and Principles",
    "content": "Our mission is to provide a simple, powerful, and accessible tool that enables individuals and developers to create custom RSS feeds from any web page. We believe in the power of open standards and the freedom to access information on your own terms. Our project is guided by these core principles: . | User Empowerment: Giving you the tools to customize your web experience. | Simplicity &amp; Power: Offering an easy-to-use interface with powerful underlying capabilities. | Open Source: Fostering a collaborative environment where the community can contribute and improve the project. | Reliability: Striving for a stable and dependable tool that consistently delivers. | . For insights into our ongoing development, project roadmap, and how you can get involved, please visit our Get Involved page. The Team . html2rss is maintained by a dedicated group of volunteers and contributors from around the world. We are passionate about open source and committed to continuously improving the project. Want to join us? Check out our Contributing Guide! . ",
    "url": "/about#our-vision-and-principles",
    
    "relUrl": "/about#our-vision-and-principles"
  },"2": {
    "doc": "Advanced Content Extraction",
    "title": "Advanced Content Extraction with Selectors",
    "content": "While basic selectors are straightforward, you can achieve very precise content extraction by combining selectors with different extractors and post-processors. ",
    "url": "/ruby-gem/how-to/advanced-content-extraction#advanced-content-extraction-with-selectors",
    
    "relUrl": "/ruby-gem/how-to/advanced-content-extraction#advanced-content-extraction-with-selectors"
  },"3": {
    "doc": "Advanced Content Extraction",
    "title": "Extractors",
    "content": "Learn how to extract specific attributes (like src for images) or static values. See Extractors. ",
    "url": "/ruby-gem/how-to/advanced-content-extraction#extractors",
    
    "relUrl": "/ruby-gem/how-to/advanced-content-extraction#extractors"
  },"4": {
    "doc": "Advanced Content Extraction",
    "title": "Post Processors",
    "content": "Manipulate extracted text, sanitize HTML, convert Markdown, or apply custom logic. See Post Processors. ",
    "url": "/ruby-gem/how-to/advanced-content-extraction#post-processors",
    
    "relUrl": "/ruby-gem/how-to/advanced-content-extraction#post-processors"
  },"5": {
    "doc": "Advanced Content Extraction",
    "title": "Advanced Content Extraction",
    "content": " ",
    "url": "/ruby-gem/how-to/advanced-content-extraction",
    
    "relUrl": "/ruby-gem/how-to/advanced-content-extraction"
  },"6": {
    "doc": "Auto Source",
    "title": "Auto Source",
    "content": "The auto_source scraper automatically finds items on a page, so you don‚Äôt have to specify CSS selectors. To enable it, add auto_source: {} to your configuration: . channel: url: https://example.com auto_source: {} . ",
    "url": "/ruby-gem/reference/auto-source",
    
    "relUrl": "/ruby-gem/reference/auto-source"
  },"7": {
    "doc": "Auto Source",
    "title": "How It Works",
    "content": "auto_source uses the following strategies to find content: . | schema: Parses &lt;script type=\"json/ld\"&gt; tags containing structured data (e.g., Schema.org). | semantic_html: Searches for semantic HTML5 tags like &lt;article&gt;, &lt;main&gt;, and &lt;section&gt;. | html: Analyzes the HTML structure to find frequently occurring selectors that are likely to contain the main content. | . ",
    "url": "/ruby-gem/reference/auto-source#how-it-works",
    
    "relUrl": "/ruby-gem/reference/auto-source#how-it-works"
  },"8": {
    "doc": "Auto Source",
    "title": "Fine-Tuning",
    "content": "You can customize auto_source to improve its accuracy. Scraper Options . Enable or disable specific scrapers and adjust their settings: . auto_source: scraper: schema: enabled: false # default: true semantic_html: enabled: false # default: true html: enabled: true minimum_selector_frequency: 3 # default: 2 use_top_selectors: 3 # default: 5 . Cleanup Options . Remove unwanted items from the results: . auto_source: cleanup: keep_different_domain: false # default: true min_words_title: 4 # default: 3 . ",
    "url": "/ruby-gem/reference/auto-source#fine-tuning",
    
    "relUrl": "/ruby-gem/reference/auto-source#fine-tuning"
  },"9": {
    "doc": "Automatic Updates",
    "title": "Automatic Updates with Watchtower",
    "content": "The watchtower service automatically pulls running Docker images and checks for updates. If an update is available, it will automatically start the updated image with the same configuration as the running one. Please read its manual. The docker-compose.yml in the Installation Guide contains a service description for watchtower. ",
    "url": "/web-application/how-to/automatic-updates#automatic-updates-with-watchtower",
    
    "relUrl": "/web-application/how-to/automatic-updates#automatic-updates-with-watchtower"
  },"10": {
    "doc": "Automatic Updates",
    "title": "Automatic Updates",
    "content": " ",
    "url": "/web-application/how-to/automatic-updates",
    
    "relUrl": "/web-application/how-to/automatic-updates"
  },"11": {
    "doc": "Building your RSS feeds",
    "title": "How to build your RSS feeds",
    "content": "To build your own RSS feed, you need to create a feed config. That feed config goes into the file feeds.yml. Check out the example feed config. Please refer to html2rss‚Äô README for a description of the feed config and its options. html2rss-web is just a small web application that builds on html2rss. ",
    "url": "/web-application/tutorials/building-feeds#how-to-build-your-rss-feeds",
    
    "relUrl": "/web-application/tutorials/building-feeds#how-to-build-your-rss-feeds"
  },"12": {
    "doc": "Building your RSS feeds",
    "title": "Building your RSS feeds",
    "content": " ",
    "url": "/web-application/tutorials/building-feeds",
    
    "relUrl": "/web-application/tutorials/building-feeds"
  },"13": {
    "doc": "Channel",
    "title": "Channel",
    "content": "The channel configuration block defines the metadata for your RSS feed. channel: url: https://example.com title: \"My Custom Feed\" description: \"A feed of the latest news from Example.com\" author: \"jane.doe@example.com (Jane Doe)\" ttl: 60 language: \"en-us\" time_zone: \"Europe/Berlin\" . ",
    "url": "/ruby-gem/reference/channel",
    
    "relUrl": "/ruby-gem/reference/channel"
  },"14": {
    "doc": "Channel",
    "title": "Options",
    "content": "| Attribute | Required | Description | . | url | Required | The URL of the website to scrape. | . | title | Optional | The title of the RSS feed. Defaults to the website‚Äôs title. | . | description | Optional | A description for the RSS feed. Defaults to the website‚Äôs meta description. | . | author | Optional | The author of the feed, in the format email (Name). | . | ttl | Optional | The ‚Äútime to live‚Äù for the feed in minutes. Defaults to the max-age from the response headers, or 360. | . | language | Optional | The language of the feed. Defaults to the lang attribute of the &lt;html&gt; tag. | . | time_zone | Optional | The time zone for parsing dates. See the list of tz database time zones. | . ",
    "url": "/ruby-gem/reference/channel#options",
    
    "relUrl": "/ruby-gem/reference/channel#options"
  },"15": {
    "doc": "CLI Reference",
    "title": "CLI Reference",
    "content": "This section provides a reference for the html2rss command-line interface (CLI). For detailed documentation on the Ruby API, please refer to the official YARD documentation. üìö View the Ruby API Docs on rubydoc.info . Command-Line Interface (CLI) . The html2rss executable provides the primary way to interact with the tool from your terminal. html2rss auto &lt;URL&gt; . Automatically generates an RSS feed from the provided URL. | &lt;URL&gt; (Required): The URL of the website to generate a feed from. | . Example: . html2rss auto https://unmatchedstyle.com/ . html2rss feed &lt;CONFIG_FILE&gt; . Generates an RSS feed based on the provided YAML configuration file. | &lt;CONFIG_FILE&gt; (Required): Path to your YAML configuration file. | . Examples: . # Generate and print to console html2rss feed my_feed.yml # Generate and save to an XML file html2rss feed my_feed.yml &gt; my_feed.xml . html2rss help . Displays the help message with available commands and options. html2rss --version . Displays the currently installed version of html2rss. ",
    "url": "/ruby-gem/reference/cli-reference",
    
    "relUrl": "/ruby-gem/reference/cli-reference"
  },"16": {
    "doc": "Contributing",
    "title": "Contributing to html2rss",
    "content": "We‚Äôre thrilled that you‚Äôre interested in contributing to html2rss! There are many ways to get involved, and we welcome contributions of all kinds. ",
    "url": "/get-involved/contributing#contributing-to-html2rss",
    
    "relUrl": "/get-involved/contributing#contributing-to-html2rss"
  },"17": {
    "doc": "Contributing",
    "title": "Code of Conduct",
    "content": "Before you begin, please read our Code of Conduct. We expect all contributors to adhere to this code to ensure that our community is a welcoming and inclusive space for everyone. ",
    "url": "/get-involved/contributing#code-of-conduct",
    
    "relUrl": "/get-involved/contributing#code-of-conduct"
  },"18": {
    "doc": "Contributing",
    "title": "How to Contribute",
    "content": "Here are some of the ways you can contribute to the html2rss project: . 1. Create a Feed Config . Are you missing an RSS feed for a website? You can create your own feed config and share it with the community. It‚Äôs a great way to get started with html2rss and help other users. The html2rss ‚Äúecosystem‚Äù is a community project. We welcome contributions of all kinds. This includes new feed configs, suggesting and implementing features, providing bug fixes, documentation improvements, and any other kind of help. Which way you choose to add a new feed config is up to you. You can do it manually. Please submit a pull request! . After you‚Äôre done, you can test your feed config by running bundle exec html2rss feed lib/html2rss/configs/&lt;domainname.tld&gt;/&lt;path&gt;.yml. Preferred way: manually . | Fork the html2rss-config git repository and run bundle install (you need to have Ruby &gt;= 3.3 installed). | Create a new folder and file following this convention: lib/html2rss/configs/&lt;domainname.tld&gt;/&lt;path&gt;.yml | Create the feed config in the &lt;path&gt;.yml file. | Add this spec file in the spec/html2rss/configs/&lt;domainname.tld&gt;/&lt;path&gt;_spec.rb file. | . RSpec.describe '&lt;domainname.tld&gt;/&lt;path&gt;' do include_examples 'config.yml', described_class end . 2. Improve this Website . This website is built with Jekyll and is hosted on GitHub Pages. If you have any ideas for improving the documentation or the design, we‚Äôd love to hear from you. Find the source code on GitHub . 3. Host a Public Instance . The html2rss-web project is a web application that allows you to create and manage your RSS feeds through a user-friendly interface. You can host your own public instance to help other users create feeds. Learn how to host a public instance . 4. Improve the html2rss Gem . Are you a Ruby developer? You can help us improve the core html2rss gem. Whether you‚Äôre fixing a bug, adding a new feature, or improving the documentation, your contributions are welcome. Check out the documentation for the html2rss Gem . 5. Report Bugs &amp; Discuss Features . If you‚Äôve found a bug, please open an issue on the appropriate GitHub repository. For new feature ideas, we encourage you to start a discussion first. Report Bugs: . | html2rss issues | html2rss-web issues | html2rss-configs issues | . Discuss Features: . | Start a New Discussion on GitHub | . We appreciate your interest in contributing to html2rss! . ",
    "url": "/get-involved/contributing#how-to-contribute",
    
    "relUrl": "/get-involved/contributing#how-to-contribute"
  },"19": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": " ",
    "url": "/get-involved/contributing",
    
    "relUrl": "/get-involved/contributing"
  },"20": {
    "doc": "Custom HTTP Requests",
    "title": "Customizing HTTP Requests",
    "content": "You might need to send custom HTTP headers (e.g., User-Agent, Authorization) to access certain content or interact with APIs. ",
    "url": "/ruby-gem/how-to/custom-http-requests#customizing-http-requests",
    
    "relUrl": "/ruby-gem/how-to/custom-http-requests#customizing-http-requests"
  },"21": {
    "doc": "Custom HTTP Requests",
    "title": "Solution",
    "content": "Configure custom HTTP headers in your feed configuration. ",
    "url": "/ruby-gem/how-to/custom-http-requests#solution",
    
    "relUrl": "/ruby-gem/how-to/custom-http-requests#solution"
  },"22": {
    "doc": "Custom HTTP Requests",
    "title": "Custom HTTP Requests",
    "content": " ",
    "url": "/ruby-gem/how-to/custom-http-requests",
    
    "relUrl": "/ruby-gem/how-to/custom-http-requests"
  },"23": {
    "doc": "Deployment",
    "title": "Deployment",
    "content": "This app is published on Docker Hub and therefore easy to use with Docker. The docker-compose.yml in the Installation Guide is a good starting point. If you‚Äôre going to host a public instance, please, please, please: . | Put the application behind a reverse proxy. | Allow outside connections only via HTTPS. | Have an auto-update strategy (e.g., watchtower). | Monitor your /health_check.txt endpoint. | Let the world know and add your instance to the wiki ‚Äì thank you! | . ",
    "url": "/web-application/how-to/deployment",
    
    "relUrl": "/web-application/how-to/deployment"
  },"24": {
    "doc": "Join Community Discussions",
    "title": "Join Community Discussions",
    "content": "Connect with other users and contributors by joining our community discussions on GitHub. This is a vibrant space for general questions, sharing tips, discussing ideas, and getting feedback from the community. üí¨ Join Discussions on GitHub . We encourage you to participate, ask questions, and share your insights! . ",
    "url": "/get-involved/discussions",
    
    "relUrl": "/get-involved/discussions"
  },"25": {
    "doc": "Dynamic Parameters",
    "title": "Dynamic Parameters in URLs and Headers",
    "content": "For websites with similar structures but varying content based on a parameter in the URL or headers, you can use dynamic parameters. ",
    "url": "/ruby-gem/how-to/dynamic-parameters#dynamic-parameters-in-urls-and-headers",
    
    "relUrl": "/ruby-gem/how-to/dynamic-parameters#dynamic-parameters-in-urls-and-headers"
  },"26": {
    "doc": "Dynamic Parameters",
    "title": "Solution",
    "content": "You can add dynamic parameters to the channel and headers values. This is useful for creating feeds from structurally similar pages with different URLs. channel: url: \"http://domainname.tld/whatever/%&lt;id&gt;s.html\" headers: X-Something: \"%&lt;foo&gt;s\" . You can then pass the values for these parameters when you run html2rss: . html2rss feed the_feed_config.yml --params id:42 foo:bar . ",
    "url": "/ruby-gem/how-to/dynamic-parameters#solution",
    
    "relUrl": "/ruby-gem/how-to/dynamic-parameters#solution"
  },"27": {
    "doc": "Dynamic Parameters",
    "title": "Explanation",
    "content": ". | The %&lt;param&gt;s syntax in the URL and headers is a placeholder for dynamic parameters. | You provide the actual values for these parameters at runtime using the --params option. | This allows you to reuse the same feed configuration for multiple similar pages or APIs. | . ",
    "url": "/ruby-gem/how-to/dynamic-parameters#explanation",
    
    "relUrl": "/ruby-gem/how-to/dynamic-parameters#explanation"
  },"28": {
    "doc": "Dynamic Parameters",
    "title": "Dynamic Parameters",
    "content": " ",
    "url": "/ruby-gem/how-to/dynamic-parameters",
    
    "relUrl": "/ruby-gem/how-to/dynamic-parameters"
  },"29": {
    "doc": "ENV variables",
    "title": "Configuration Reference",
    "content": " ",
    "url": "/web-application/reference/env-variables#configuration-reference",
    
    "relUrl": "/web-application/reference/env-variables#configuration-reference"
  },"30": {
    "doc": "ENV variables",
    "title": "Supported ENV variables",
    "content": "| Name | Description | . | BASE_URL | default: ‚Äòhttp://localhost:3000‚Äô | . | LOG_LEVEL | default: ‚Äòwarn‚Äô | . | HEALTH_CHECK_USERNAME | default: auto-generated on start | . | HEALTH_CHECK_PASSWORD | default: auto-generated on start | . | ¬† | ¬† | . | AUTO_SOURCE_ENABLED | default: false | . | AUTO_SOURCE_USERNAME | no default. | . | AUTO_SOURCE_PASSWORD | no default. | . | AUTO_SOURCE_ALLOWED_ORIGINS | no default. | . | ¬† | ¬† | . | PORT | default: 3000 | . | RACK_ENV | default: ‚Äòdevelopment‚Äô | . | RACK_TIMEOUT_SERVICE_TIMEOUT | default: 15 | . | WEB_CONCURRENCY | default: 2 | . | WEB_MAX_THREADS | default: 5 | . | ¬† | ¬† | . | SENTRY_DSN | no default. | . ",
    "url": "/web-application/reference/env-variables#supported-env-variables",
    
    "relUrl": "/web-application/reference/env-variables#supported-env-variables"
  },"31": {
    "doc": "ENV variables",
    "title": "ENV variables",
    "content": " ",
    "url": "/web-application/reference/env-variables",
    
    "relUrl": "/web-application/reference/env-variables"
  },"32": {
    "doc": "Getting Started",
    "title": "Getting Started with html2rss-web",
    "content": "Welcome! This guide will help you create RSS feeds from any website using the html2rss-web application. ",
    "url": "/web-application/getting-started#getting-started-with-html2rss-web",
    
    "relUrl": "/web-application/getting-started#getting-started-with-html2rss-web"
  },"33": {
    "doc": "Getting Started",
    "title": "What is html2rss-web?",
    "content": "html2rss-web is a user-friendly web application that turns any website into an RSS feed. It‚Äôs part of the html2rss project, which also includes a Ruby gem for developers. Think of html2rss-web as a translator that converts website content into a format your feed reader can understand. ",
    "url": "/web-application/getting-started#what-is-html2rss-web",
    
    "relUrl": "/web-application/getting-started#what-is-html2rss-web"
  },"34": {
    "doc": "Getting Started",
    "title": "Why Use RSS Feeds?",
    "content": "Instead of visiting 20 different websites every day, you can: . | Get all updates in one place - your feed reader | Never miss new content - automatic notifications | Save time - no more manual checking | Stay organized - categorize and filter content | . ",
    "url": "/web-application/getting-started#why-use-rss-feeds",
    
    "relUrl": "/web-application/getting-started#why-use-rss-feeds"
  },"35": {
    "doc": "Getting Started",
    "title": "Quick Start Options",
    "content": "Option 1: Browse Ready-Made Feeds (Easiest) . | Feed Directory - See what‚Äôs already available | Copy the RSS URL and add it to your feed reader | . Option 2: Install Your Own Instance . | Installation Guide - Set up your own copy | Create Custom Feeds - Make feeds for any website | . New to RSS? We recommend starting with the Feed Directory to see examples, then installing html2rss-web to create your own feeds. ",
    "url": "/web-application/getting-started#quick-start-options",
    
    "relUrl": "/web-application/getting-started#quick-start-options"
  },"36": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": " ",
    "url": "/web-application/getting-started",
    
    "relUrl": "/web-application/getting-started"
  },"37": {
    "doc": "Handling Dynamic Content",
    "title": "Handling Dynamic Content and JavaScript",
    "content": "Some websites load their content dynamically using JavaScript. The default html2rss strategy might not see this content. ",
    "url": "/ruby-gem/how-to/handling-dynamic-content#handling-dynamic-content-and-javascript",
    
    "relUrl": "/ruby-gem/how-to/handling-dynamic-content#handling-dynamic-content-and-javascript"
  },"38": {
    "doc": "Handling Dynamic Content",
    "title": "Solution",
    "content": "Use the browserless strategy to render JavaScript-heavy websites with a headless browser. ",
    "url": "/ruby-gem/how-to/handling-dynamic-content#solution",
    
    "relUrl": "/ruby-gem/how-to/handling-dynamic-content#solution"
  },"39": {
    "doc": "Handling Dynamic Content",
    "title": "Handling Dynamic Content",
    "content": " ",
    "url": "/ruby-gem/how-to/handling-dynamic-content",
    
    "relUrl": "/ruby-gem/how-to/handling-dynamic-content"
  },"40": {
    "doc": "Headers",
    "title": "Headers",
    "content": "The headers key allows you to set custom HTTP headers for your requests. This is useful for accessing APIs or other protected content. ",
    "url": "/ruby-gem/reference/headers",
    
    "relUrl": "/ruby-gem/reference/headers"
  },"41": {
    "doc": "Headers",
    "title": "Configuration",
    "content": "You can add any number of headers to your configuration: . headers: User-Agent: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\" Authorization: \"Bearer YOUR_TOKEN\" Accept: \"application/json\" . ",
    "url": "/ruby-gem/reference/headers#configuration",
    
    "relUrl": "/ruby-gem/reference/headers#configuration"
  },"42": {
    "doc": "Headers",
    "title": "Dynamic Parameters",
    "content": "You can also use dynamic parameters in your headers to pass values at runtime. See Dynamic Parameters for more information. ",
    "url": "/ruby-gem/reference/headers#dynamic-parameters",
    
    "relUrl": "/ruby-gem/reference/headers#dynamic-parameters"
  },"43": {
    "doc": "Feed Directory",
    "title": "Welcome to the Feed Directory!",
    "content": "This directory contains a list of pre-built configurations to create RSS feeds for various websites. ",
    "url": "/feed-directory/",
    
    "relUrl": "/feed-directory/"
  },"44": {
    "doc": "Feed Directory",
    "title": "Instance URL",
    "content": "An \"Instance URL\" is the address of a running html2rss-web application. You can use a public instance, but we encourage you to host your own. üöÄ Host Your Own Instance (and share it!) Find more public instances on the community-run wiki. This site needs JavaScript to link to the feed URL! Instance URL Search https://www.adfc.de/presse/pressemitteilungen/ . https://apnews.com/%&lt;section&gt;s . section Close https://avherald.com/ . https://www.bbc.co.uk/programmes/%&lt;id&gt;s/episodes/player . id Close https://www.bbc.com/mundo . https://blog.mondediplo.net/%&lt;blog&gt;s . blog Close https://www.canarianweekly.com/ . https://webapp.cinemascore.com/guest/surveys . https://www.cleanenergywire.org/news-archive . https://www.cnet.com/%&lt;section&gt;s/%&lt;sub&gt;s/ . section sub Close https://www.computerbase.de . https://cutle.fish/ . https://deraktionaer.de/ . https://developer.apple.com/tutorials/data/documentation/Technotes.json . https://www.dfs.de/homepage/de/medien/presse/ . https://www.dsw-info.de/presse . https://www.espn.com/f1/ . https://www.fia.com/documents/championships/fia-formula-one-world-championship-14/season/season-2025-2071 . https://www.formula1.com/en/latest/all.html . https://github.com/%&lt;username&gt;s/%&lt;repository&gt;s/releases . username repository Close https://www.iaapa.org/news . https://www.imdb.com/user/%&lt;user_id&gt;s/ratings . user_id Close https://www.ingenieur.de/karriere/arbeitsleben/heiko-mell/ . https://kinocheck.de/filmstarts . https://www.newyorker.com/magazine . https://www.nomanssky.com/news/ . https://pankow.lebensmittel-kontrollergebnisse.de/Search . https://phys.org/weekly-news/ . https://rbb24.de/ . https://www.robinwood.de/was-gibt-es-neues/aktuelles . https://s3.amazonaws.com/popular-movies/movies.json . https://sebastianvettel.de/news/ . https://softwareleadweekly.com/issues . https://solarthermalworld.org/news . https://www.spektrum.de/ . https://www.spiegel.de/impressum/autor-%&lt;id&gt;s . id Close https://stackoverflow.com/questions . https://www.steuerzahler.de/news . https://www.stripes.com/ . https://support.apple.com/en-gb/HT201222 . https://support.apple.com/exchange_repair . https://www.teneriffa-news.com/news . https://www.test.de/archiv/ . https://www.theguardian.com/international . https://www.thoughtworks.com/insights . https://www.tourismusnetzwerk-brandenburg.de/nc/aktuelle-nachrichten/ . https://www.webentwickler-jobs.de/in/%&lt;region&gt;s . region Close . ",
    "url": "/feed-directory/",
    
    "relUrl": "/feed-directory/"
  },"45": {
    "doc": "Feed Directory",
    "title": "Contribute to the Directory",
    "content": "The feed configurations in this directory are community-driven. If you've created a new feed configuration, we encourage you to share it with the community. Contribute on GitHub ",
    "url": "/feed-directory/",
    
    "relUrl": "/feed-directory/"
  },"46": {
    "doc": "Feed Directory",
    "title": "Feed Directory",
    "content": " ",
    "url": "/feed-directory/",
    
    "relUrl": "/feed-directory/"
  },"47": {
    "doc": "html2rss-configs",
    "title": "Creating Custom RSS Feeds",
    "content": "Want to create RSS feeds for websites that don‚Äôt offer them? This guide shows you how to write simple configuration files that tell the html2rss engine exactly what content to extract. Don‚Äôt worry if you‚Äôre not technical - we‚Äôll explain everything step by step! . You can see examples of what others have created in the Feed Directory. ",
    "url": "/html2rss-configs/#creating-custom-rss-feeds",
    
    "relUrl": "/html2rss-configs/#creating-custom-rss-feeds"
  },"48": {
    "doc": "html2rss-configs",
    "title": "How It Works",
    "content": "Think of the html2rss engine as a smart assistant that needs instructions. You give it a simple ‚Äúrecipe‚Äù (called a config file) that tells it: . | Which website to look at | What content to find (articles, posts, etc.) | How to organize that content into an RSS feed | . The recipe is written in YAML - a simple format that‚Äôs easy to read and write. Both html2rss-web and the html2rss Ruby gem use these same configuration files. The channel Block . This tells the html2rss engine basic information about your feed - like giving it a name and telling it which website to look at. Example: . channel: url: https://example.com/blog title: My Awesome Blog . This says: ‚ÄúLook at this website and call the feed ‚ÄòMy Awesome Blog‚Äô‚Äù . The selectors Block . This is where you tell the html2rss engine exactly what to find on the page. You use CSS selectors (like you might use in web design) to point to specific parts of the webpage. Example: . selectors: items: selector: \"article.post\" title: selector: \"h2 a\" link: selector: \"h2 a\" . This says: ‚ÄúFind each article, get the title from the h2 link, and get the link from the same h2 link‚Äù . Need more details? Check our complete guide to selectors for all the options. ",
    "url": "/html2rss-configs/#how-it-works",
    
    "relUrl": "/html2rss-configs/#how-it-works"
  },"49": {
    "doc": "html2rss-configs",
    "title": "Tutorial: Your First Feed",
    "content": "Let‚Äôs create a simple RSS feed step by step. We‚Äôll use a basic blog as our example. Step 1: Look at the Website . First, visit the website you want to create a feed for. Right-click and ‚ÄúView Page Source‚Äù to see the HTML structure. Look for patterns like this: . &lt;div class=\"posts\"&gt; &lt;article class=\"post\"&gt; &lt;h2&gt;&lt;a href=\"/post/1\"&gt;First Post&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;This is the summary of the first post.&lt;/p&gt; &lt;/article&gt; &lt;article class=\"post\"&gt; &lt;h2&gt;&lt;a href=\"/post/2\"&gt;Second Post&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;This is the summary of the second post.&lt;/p&gt; &lt;/article&gt; &lt;/div&gt; . What we see: Each article is wrapped in &lt;article class=\"post\"&gt;, titles are in &lt;h2&gt;&lt;a&gt; tags, and descriptions are in &lt;p&gt; tags. Step 2: Create Your Config File . Create a new text file and save it as my-blog.yml (or any name you like). Add this basic information: . # my-blog.yml channel: url: https://example.com/blog title: My Awesome Blog description: The latest news from my awesome blog. This tells html2rss: ‚ÄúLook at this website and call the feed ‚ÄòMy Awesome Blog‚Äô‚Äù . Step 3: Tell html2rss What to Find . Now add the selectors that tell html2rss exactly what content to extract: . # my-blog.yml selectors: items: selector: \"article.post\" title: selector: \"h2 a\" link: selector: \"h2 a\" description: selector: \"p\" . What this means: . | items: \"article.post\" = ‚ÄúFind each article with class ‚Äòpost‚Äô‚Äù | title: \"h2 a\" = ‚ÄúGet the title from the h2 link‚Äù | link: \"h2 a\" = ‚ÄúGet the link from the same h2 link‚Äù | description: \"p\" = ‚ÄúGet the description from the paragraph‚Äù | . ",
    "url": "/html2rss-configs/#tutorial-your-first-feed",
    
    "relUrl": "/html2rss-configs/#tutorial-your-first-feed"
  },"50": {
    "doc": "html2rss-configs",
    "title": "Advanced Techniques",
    "content": "Dynamic Feeds with Parameters . Use the parameters block to create flexible configs. This is useful for feeds based on search terms, categories, or regions. # news-search.yml parameters: query: type: string default: \"technology\" channel: url: \"https://news.example.com/search?q={query}\" title: \"News results for '{query}'\" selectors: items: selector: \".article\" title: selector: \"h2 a\" url: selector: \"h2 a\" extractor: \"href\" . ",
    "url": "/html2rss-configs/#advanced-techniques",
    
    "relUrl": "/html2rss-configs/#advanced-techniques"
  },"51": {
    "doc": "html2rss-configs",
    "title": "Contributing Your Config",
    "content": "Have you created a config that others might find useful? We strongly encourage you to contribute it to the project! By sharing your config, you make it available to all users of the public html2rss-web service and the Feed Directory. To contribute, please create a pull request to the html2rss-configs repository. ",
    "url": "/html2rss-configs/#contributing-your-config",
    
    "relUrl": "/html2rss-configs/#contributing-your-config"
  },"52": {
    "doc": "html2rss-configs",
    "title": "Usage and Integration",
    "content": "With html2rss-web . Once your pull request is reviewed and merged, your config will become available on the public html2rss-web instance. You can then access it at the path /&lt;domainname.tld/path&gt;.rss. Programmatic Usage in Ruby . You can also use html2rss-configs programmatically in your Ruby applications. Add this to your Gemfile: . gem 'html2rss-configs', git: 'https://github.com/html2rss/html2rss-configs.git' . And use it in your code: . require 'html2rss/configs' config = Html2rss::Configs.find_by_name('domainname.tld/whatever') rss = Html2rss.feed(config) . ",
    "url": "/html2rss-configs/#usage-and-integration",
    
    "relUrl": "/html2rss-configs/#usage-and-integration"
  },"53": {
    "doc": "html2rss-configs",
    "title": "html2rss-configs",
    "content": " ",
    "url": "/html2rss-configs/",
    
    "relUrl": "/html2rss-configs/"
  },"54": {
    "doc": "Get Involved",
    "title": "Get Involved",
    "content": ". | Sponsoring | . Engage with the html2rss project. Contribute and connect with the community. | Project Roadmap: View current work, plans, and priorities. | Report Bugs &amp; Discuss Features: Report bugs or propose features. | Join Community Discussions: Connect with users and contributors. | Contribute to html2rss: Contribute code, documentation, or feed configurations. | . ",
    "url": "/get-involved/",
    
    "relUrl": "/get-involved/"
  },"55": {
    "doc": "Home",
    "title": "Turn Any Website Into an RSS Feed",
    "content": "Ever wished you could follow your favorite websites like a social media feed? The html2rss project makes it possible by creating RSS feeds for any website - even ones that don‚Äôt offer them. üöÄ Get Started with html2rss-web . ",
    "url": "/#turn-any-website-into-an-rss-feed",
    
    "relUrl": "/#turn-any-website-into-an-rss-feed"
  },"56": {
    "doc": "Home",
    "title": "What is RSS?",
    "content": "RSS (Really Simple Syndication) lets you follow websites in your favorite feed reader. Instead of checking multiple websites daily, you get all updates in one place - like a personalized news feed. ",
    "url": "/#what-is-rss",
    
    "relUrl": "/#what-is-rss"
  },"57": {
    "doc": "Home",
    "title": "The html2rss Project",
    "content": "The html2rss project provides two main ways to create RSS feeds: . | html2rss-web - A user-friendly web application (recommended for most users) | html2rss - A Ruby gem for developers and advanced users | . Both use the same powerful engine to extract content from websites and convert it into RSS feeds. ",
    "url": "/#the-html2rss-project",
    
    "relUrl": "/#the-html2rss-project"
  },"58": {
    "doc": "Home",
    "title": "Choose Your Path",
    "content": ". | html2rss-web: Start here! Easy-to-use web application. No technical knowledge required. | Feed Directory: Browse ready-made feeds for popular websites | html2rss (Ruby Gem): For developers who want to create custom configurations | . Ready to get started? Check out our html2rss-web getting started guide or browse existing feeds to see what‚Äôs possible. ",
    "url": "/#choose-your-path",
    
    "relUrl": "/#choose-your-path"
  },"59": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"60": {
    "doc": "How-To Guides",
    "title": "How-To Guides",
    "content": "This section provides practical examples and solutions for common tasks when using the html2rss gem. ",
    "url": "/ruby-gem/how-to/",
    
    "relUrl": "/ruby-gem/how-to/"
  },"61": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": "This section provides step-by-step tutorials to help you get started with the html2rss Ruby gem. ",
    "url": "/ruby-gem/tutorials/",
    
    "relUrl": "/ruby-gem/tutorials/"
  },"62": {
    "doc": "How-To Guides",
    "title": "How-To Guides",
    "content": "This section provides guides on how to perform specific tasks with html2rss-web. ",
    "url": "/web-application/how-to/",
    
    "relUrl": "/web-application/how-to/"
  },"63": {
    "doc": "Web Application",
    "title": "html2rss-web",
    "content": "This web application scrapes websites to build and deliver RSS 2.0 feeds. It is a powerful tool for creating custom RSS feeds. ",
    "url": "/web-application/#html2rss-web",
    
    "relUrl": "/web-application/#html2rss-web"
  },"64": {
    "doc": "Web Application",
    "title": "Get Started",
    "content": "Our Getting Started guide covers essential first steps, from understanding the application to installing your own instance. ",
    "url": "/web-application/#get-started",
    
    "relUrl": "/web-application/#get-started"
  },"65": {
    "doc": "Web Application",
    "title": "Key Features",
    "content": ". | Stable URLs: Provides stable URLs for automatically sourced feeds. | Custom Feeds: Create custom feeds. | Feed Directory: Includes many feeds out of the box. | Caching: Handles request caching and sets HTTP headers. | . The functionality of scraping websites and building the RSS feeds is provided by the Ruby gem html2rss. ",
    "url": "/web-application/#key-features",
    
    "relUrl": "/web-application/#key-features"
  },"66": {
    "doc": "Web Application",
    "title": "Web Application",
    "content": " ",
    "url": "/web-application/",
    
    "relUrl": "/web-application/"
  },"67": {
    "doc": "Reference",
    "title": "Reference",
    "content": "This section provides detailed information on the various configuration options available in html2rss. ",
    "url": "/ruby-gem/reference/",
    
    "relUrl": "/ruby-gem/reference/"
  },"68": {
    "doc": "Ruby Gem",
    "title": "The html2rss Ruby Gem",
    "content": "This section provides comprehensive documentation for the html2rss Ruby gem. ",
    "url": "/ruby-gem/#the-html2rss-ruby-gem",
    
    "relUrl": "/ruby-gem/#the-html2rss-ruby-gem"
  },"69": {
    "doc": "Ruby Gem",
    "title": "Getting Started",
    "content": "If you are new to html2rss, we recommend starting with the tutorials. ",
    "url": "/ruby-gem/#getting-started",
    
    "relUrl": "/ruby-gem/#getting-started"
  },"70": {
    "doc": "Ruby Gem",
    "title": "Documentation Sections",
    "content": ". | Tutorials: Step-by-step guides to help you get started with html2rss. | How-To Guides: Practical examples and solutions for common tasks. | Reference: Detailed information on configuration options. | . ",
    "url": "/ruby-gem/#documentation-sections",
    
    "relUrl": "/ruby-gem/#documentation-sections"
  },"71": {
    "doc": "Ruby Gem",
    "title": "Ruby Gem",
    "content": " ",
    "url": "/ruby-gem/",
    
    "relUrl": "/ruby-gem/"
  },"72": {
    "doc": "Reference",
    "title": "Reference",
    "content": "This section contains detailed reference material. ",
    "url": "/web-application/reference/",
    
    "relUrl": "/web-application/reference/"
  },"73": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": " ",
    "url": "/web-application/tutorials/",
    
    "relUrl": "/web-application/tutorials/"
  },"74": {
    "doc": "Installation",
    "title": "Installation",
    "content": "This guide will walk you through the process of installing html2rss on your system. html2rss can be installed in several ways, depending on your preferred method and environment. Prerequisites . | Ruby: html2rss is built with Ruby. Ensure you have Ruby installed (version 3.2 or higher required). You can check your Ruby version by running ruby -v in your terminal. If you don‚Äôt have Ruby, visit ruby-lang.org for installation instructions. | Bundler (Recommended): Bundler is a Ruby gem that manages your application‚Äôs dependencies. It‚Äôs highly recommended for a smooth installation. Install it with gem install bundler. | . Method 1: Gem Installation (Recommended for CLI Usage) . The simplest way to get html2rss for command-line usage is to install it as a Ruby gem. gem install html2rss . After installation, you should be able to run html2rss --version to confirm it‚Äôs working. Method 2: Using a Gemfile (For Ruby Projects) . If you‚Äôre integrating html2rss into an existing Ruby project, add it to your Gemfile: . # Gemfile gem 'html2rss' . Then, run bundle install in your project directory. Method 3: GitHub Codespaces (For Cloud Development) . For a quick start without local setup, you can develop html2rss directly in your browser using GitHub Codespaces: . The Codespace comes pre-configured with Ruby 3.4, all dependencies, and VS Code extensions ready to go! . Verifying Installation . To ensure html2rss is installed correctly, open your terminal and run: . html2rss --version . You should see the installed version number. If you encounter any issues, please refer to the Troubleshooting Guide. Next Steps . Now that html2rss is installed, let‚Äôs create your first RSS feed! . ",
    "url": "/ruby-gem/installation",
    
    "relUrl": "/ruby-gem/installation"
  },"75": {
    "doc": "Installation",
    "title": "Installation",
    "content": "This guide will help you set up your own copy of html2rss-web on your computer. Don‚Äôt worry - we‚Äôll walk you through every step! . ",
    "url": "/web-application/installation",
    
    "relUrl": "/web-application/installation"
  },"76": {
    "doc": "Installation",
    "title": "What You‚Äôll Need",
    "content": ". | Docker - A tool that makes installation simple (like an app store for server software) | About 10 minutes - The whole process is quick and automated | . Don‚Äôt have Docker? Install it first - it‚Äôs free and works on Windows, Mac, and Linux. ",
    "url": "/web-application/installation#what-youll-need",
    
    "relUrl": "/web-application/installation#what-youll-need"
  },"77": {
    "doc": "Installation",
    "title": "Step 1: Create a Folder",
    "content": "Create a new folder on your computer to store html2rss-web files: . On Windows: Right-click ‚Üí New Folder ‚Üí Name it ‚Äúhtml2rss-web‚Äù On Mac/Linux: Open Terminal and run: . mkdir html2rss-web cd html2rss-web . ",
    "url": "/web-application/installation#step-1-create-a-folder",
    
    "relUrl": "/web-application/installation#step-1-create-a-folder"
  },"78": {
    "doc": "Installation",
    "title": "Step 2: Create the Configuration File",
    "content": "Create a file called docker-compose.yml in your new folder. This file tells Docker how to set up html2rss-web with all the features you need. How to create the file: . | On Windows: Right-click in the folder ‚Üí New ‚Üí Text Document ‚Üí Rename it to docker-compose.yml (make sure to change the extension) | On Mac/Linux: Use any text editor to create the file | . services: html2rss-web: image: gilcreator/html2rss-web restart: unless-stopped ports: - \"127.0.0.1:3000:3000\" volumes: - type: bind source: ./feeds.yml target: /app/config/feeds.yml read_only: true environment: RACK_ENV: production HEALTH_CHECK_USERNAME: health HEALTH_CHECK_PASSWORD: please-set-YOUR-OWN-veeeeeery-l0ng-aNd-h4rd-to-gue55-Passw0rd! BROWSERLESS_IO_WEBSOCKET_URL: ws://browserless:3001 BROWSERLESS_IO_API_TOKEN: 6R0W53R135510 watchtower: image: containrrr/watchtower restart: unless-stopped volumes: - /var/run/docker.sock:/var/run/docker.sock - \"~/.docker/config.json:/config.json\" command: --cleanup --interval 7200 browserless: image: \"ghcr.io/browserless/chromium\" restart: unless-stopped ports: - \"127.0.0.1:3001:3001\" environment: PORT: 3001 CONCURRENT: 10 TOKEN: 6R0W53R135510 . ",
    "url": "/web-application/installation#step-2-create-the-configuration-file",
    
    "relUrl": "/web-application/installation#step-2-create-the-configuration-file"
  },"79": {
    "doc": "Installation",
    "title": "Step 3: Download the Feed List",
    "content": "html2rss-web needs a list of feeds to work with. Download our pre-made list: . On Windows: Right-click this link ‚Üí Save As ‚Üí Name it ‚Äúfeeds.yml‚Äù ‚Üí Save in your html2rss-web folder . On Mac/Linux: Open Terminal in your html2rss-web folder and run: . curl https://raw.githubusercontent.com/html2rss/html2rss-web/master/config/feeds.yml -o feeds.yml . ",
    "url": "/web-application/installation#step-3-download-the-feed-list",
    
    "relUrl": "/web-application/installation#step-3-download-the-feed-list"
  },"80": {
    "doc": "Installation",
    "title": "Step 4: Start html2rss-web",
    "content": "Now start html2rss-web: . On Windows: Open Command Prompt in your html2rss-web folder and run: . docker compose up -d . On Mac/Linux: In Terminal, run: . docker compose up -d . That‚Äôs it! üéâ html2rss-web is now running. To verify it‚Äôs working: . | Open your web browser | Go to http://localhost:3000 | You should see the html2rss-web interface with a list of available feeds | . If you see the interface, congratulations! You‚Äôve successfully set up html2rss-web. ",
    "url": "/web-application/installation#step-4-start-html2rss-web",
    
    "relUrl": "/web-application/installation#step-4-start-html2rss-web"
  },"81": {
    "doc": "Installation",
    "title": "Next Steps",
    "content": ". | Try it out! Visit http://localhost:3000 to see html2rss-web in action | Browse existing feeds - Check out what‚Äôs already available | Create your first feed - Follow our How-To Guides to make custom feeds | Need help? Check our troubleshooting guide if something doesn‚Äôt work | . ",
    "url": "/web-application/installation#next-steps",
    
    "relUrl": "/web-application/installation#next-steps"
  },"82": {
    "doc": "Report Bugs & Discuss Features",
    "title": "Report Bugs &amp; Discuss Features",
    "content": "We appreciate your help in improving html2rss! Please follow these guidelines when reporting issues or suggesting new features. Reporting Bugs . If you‚Äôve found a bug, please open an issue on the appropriate GitHub repository. This helps us track and resolve problems efficiently. ‚û°Ô∏è Open an Issue on GitHub . When opening a bug report, please provide as much detail as possible, including: . | The html2rss version you are using. | Your operating system. | Your configuration file (if applicable). | The target URL you are trying to scrape. | Any error messages you receive. | Steps to reproduce the issue. | . Discussing New Features . For new feature ideas or enhancements, we encourage you to start a discussion on GitHub Discussions first. This allows for community input, refinement of the idea, and helps us prioritize development. üí¨ Start a New Discussion on GitHub . If the discussion leads to a concrete proposal, a formal feature request issue can then be opened. ",
    "url": "/get-involved/issues-and-features#report-bugs--discuss-features",
    
    "relUrl": "/get-involved/issues-and-features#report-bugs--discuss-features"
  },"83": {
    "doc": "Report Bugs & Discuss Features",
    "title": "Report Bugs & Discuss Features",
    "content": " ",
    "url": "/get-involved/issues-and-features",
    
    "relUrl": "/get-involved/issues-and-features"
  },"84": {
    "doc": "Managing Feed Configs",
    "title": "Managing Feed Configurations with YAML",
    "content": "For easier management, especially when using the CLI or html2rss-web, you can store your feed configurations in a YAML file. ",
    "url": "/ruby-gem/how-to/managing-feed-configs#managing-feed-configurations-with-yaml",
    
    "relUrl": "/ruby-gem/how-to/managing-feed-configs#managing-feed-configurations-with-yaml"
  },"85": {
    "doc": "Managing Feed Configs",
    "title": "Global and Feed-Specific Configurations",
    "content": "You can define global settings that apply to all feeds, and then define individual feed configurations under the feeds key. # Global settings headers: \"User-Agent\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1\" \"Accept\": \"text/html\" # Feed-specific settings feeds: my-first-feed: channel: url: \"https://example.com/blog\" selectors: # ... my-second-feed: channel: url: \"https://example.com/news\" selectors: # ... ",
    "url": "/ruby-gem/how-to/managing-feed-configs#global-and-feed-specific-configurations",
    
    "relUrl": "/ruby-gem/how-to/managing-feed-configs#global-and-feed-specific-configurations"
  },"86": {
    "doc": "Managing Feed Configs",
    "title": "Building Feeds from a YAML File",
    "content": "Ruby . require 'html2rss' # Build a specific feed from the YAML file my_feed_config = Html2rss.config_from_yaml_file('feeds.yml', 'my-first-feed') rss = Html2rss.feed(my_feed_config) puts rss # If the YAML file contains only one feed, you can omit the feed name single_feed_config = Html2rss.config_from_yaml_file('single.yml') rss = Html2rss.feed(single_feed_config) puts rss . Command Line . # Build a specific feed html2rss feed feeds.yml my-first-feed # Build a feed from a single-feed YAML file html2rss feed single.yml . ",
    "url": "/ruby-gem/how-to/managing-feed-configs#building-feeds-from-a-yaml-file",
    
    "relUrl": "/ruby-gem/how-to/managing-feed-configs#building-feeds-from-a-yaml-file"
  },"87": {
    "doc": "Managing Feed Configs",
    "title": "Managing Feed Configs",
    "content": " ",
    "url": "/ruby-gem/how-to/managing-feed-configs",
    
    "relUrl": "/ruby-gem/how-to/managing-feed-configs"
  },"88": {
    "doc": "Monitoring",
    "title": "Monitoring",
    "content": " ",
    "url": "/web-application/reference/monitoring",
    
    "relUrl": "/web-application/reference/monitoring"
  },"89": {
    "doc": "Monitoring",
    "title": "Runtime monitoring via GET /health_check.txt",
    "content": "It is recommended to set up monitoring of the /health_check.txt endpoint. With that, you can find out when one of your own configs breaks. The endpoint uses HTTP Basic authentication. First, set the username and password via these environment variables: HEALTH_CHECK_USERNAME and HEALTH_CHECK_PASSWORD. If these are not set, html2rss-web will generate a new random username and password on each start. An authenticated GET /health_check.txt request will respond with: . | If the feeds are generatable: success. | Otherwise: the names of the broken configs. | . To get notified when one of your configs breaks, set up monitoring of this endpoint. UptimeRobot‚Äôs free plan is sufficient for basic monitoring (every 5 minutes). Create a monitor of type Keyword with this information and make it aware of your username and password: . ",
    "url": "/web-application/reference/monitoring#runtime-monitoring-via-get-health_checktxt",
    
    "relUrl": "/web-application/reference/monitoring#runtime-monitoring-via-get-health_checktxt"
  },"90": {
    "doc": "Monitoring",
    "title": "Application Performance Monitoring using Sentry",
    "content": "When you specify SENTRY_DSN in your environment variables, the application will be setup to use Sentry. ",
    "url": "/web-application/reference/monitoring#application-performance-monitoring-using-sentry",
    
    "relUrl": "/web-application/reference/monitoring#application-performance-monitoring-using-sentry"
  },"91": {
    "doc": "Scraping JSON Responses",
    "title": "Scraping JSON Responses",
    "content": "When a website returns a JSON response (i.e., with a Content-Type of application/json), html2rss converts the JSON to XML, allowing you to use CSS selectors for data extraction. [!NOTE] The JSON response must be an Array or a Hash for the conversion to work. ",
    "url": "/ruby-gem/how-to/scraping-json",
    
    "relUrl": "/ruby-gem/how-to/scraping-json"
  },"92": {
    "doc": "Scraping JSON Responses",
    "title": "JSON to XML Conversion Examples",
    "content": "JSON Object . A JSON object like this: . { \"data\": [{ \"title\": \"Headline\", \"url\": \"https://example.com\" }] } . is converted to this XML structure: . &lt;object&gt; &lt;data&gt; &lt;array&gt; &lt;object&gt; &lt;title&gt;Headline&lt;/title&gt; &lt;url&gt;https://example.com&lt;/url&gt; &lt;/object&gt; &lt;/array&gt; &lt;/data&gt; &lt;/object&gt; . You would use array &gt; object as your items selector. JSON Array . A JSON array like this: . [{ \"title\": \"Headline\", \"url\": \"https://example.com\" }] . is converted to this XML structure: . &lt;array&gt; &lt;object&gt; &lt;title&gt;Headline&lt;/title&gt; &lt;url&gt;https://example.com&lt;/url&gt; &lt;/object&gt; &lt;/array&gt; . You would use array &gt; object as your items selector. ",
    "url": "/ruby-gem/how-to/scraping-json#json-to-xml-conversion-examples",
    
    "relUrl": "/ruby-gem/how-to/scraping-json#json-to-xml-conversion-examples"
  },"93": {
    "doc": "Scraping JSON Responses",
    "title": "Configuration Examples",
    "content": "Ruby . Html2rss.feed( headers: { Accept: 'application/json' }, channel: { url: 'http://domainname.tld/whatever.json' }, selectors: { title: { selector: 'foo' } } ) . YAML . headers: Accept: application/json channel: url: \"http://domainname.tld/whatever.json\" selectors: items: selector: \"array &gt; object\" title: selector: \"foo\" . ",
    "url": "/ruby-gem/how-to/scraping-json#configuration-examples",
    
    "relUrl": "/ruby-gem/how-to/scraping-json#configuration-examples"
  },"94": {
    "doc": "Selectors",
    "title": "Selectors",
    "content": "The selectors scraper gives you fine-grained control over content extraction using CSS selectors. A valid RSS item requires at least a title or a description. ",
    "url": "/ruby-gem/reference/selectors",
    
    "relUrl": "/ruby-gem/reference/selectors"
  },"95": {
    "doc": "Selectors",
    "title": "Basic Configuration",
    "content": "At a minimum, you need an items selector to define the list of articles and a title selector for the article titles. channel: url: \"https://example.com\" selectors: items: selector: \".article\" title: selector: \"h1\" . ",
    "url": "/ruby-gem/reference/selectors#basic-configuration",
    
    "relUrl": "/ruby-gem/reference/selectors#basic-configuration"
  },"96": {
    "doc": "Selectors",
    "title": "Automatic Item Enhancement",
    "content": "To simplify configuration, html2rss can automatically extract the title, url, and image from each item. This feature is enabled by default. selectors: items: selector: \".article\" enhance: true # default: true . ",
    "url": "/ruby-gem/reference/selectors#automatic-item-enhancement",
    
    "relUrl": "/ruby-gem/reference/selectors#automatic-item-enhancement"
  },"97": {
    "doc": "Selectors",
    "title": "RSS 2.0 Selectors",
    "content": "While you can define any named selector, only the following are used in the final RSS feed: . | RSS 2.0 Tag | html2rss Name | ¬† | . | title | title | ¬† | . | description | description | ¬† | . | link | url | ¬† | . | author | author | ¬† | . | category | categories | ¬† | . | guid | guid | ¬† | . | enclosure | enclosure | ¬† | . | pubDate | published_at | ¬† | . | comments | comments | ‚ö†Ô∏è Not currently implemented | . ",
    "url": "/ruby-gem/reference/selectors#rss-20-selectors",
    
    "relUrl": "/ruby-gem/reference/selectors#rss-20-selectors"
  },"98": {
    "doc": "Selectors",
    "title": "Selector Options",
    "content": "Each selector can be configured with the following options: . | Name | Description | . | selector | The CSS selector for the target element. | . | extractor | The extractor to use for this selector. | . | attribute | The attribute name (required for attribute extractor). | . | static | The static value (required for static extractor). | . | post_process | A list of post-processors to apply to the value. | . Extractors . Extractors define how to get the value from a selected element. | text: The inner text of the element (default). | html: The outer HTML of the element. | href: The value of the href attribute. | attribute: The value of a specified attribute. | static: A static value. | . Post-Processors . Post-processors manipulate the extracted value. | gsub: Performs a global substitution on a string. | html_to_markdown: Converts HTML to Markdown. | markdown_to_html: Converts Markdown to HTML. | parse_time: Parses a string into a Time object. | parse_uri: Parses a string into a URI object. | sanitize_html: Sanitizes HTML to prevent security vulnerabilities. | substring: Extracts a substring from a string. | template: Creates a new string from a template and other selector values. | . Always use the sanitize_html post-processor for any HTML content to prevent security risks. ",
    "url": "/ruby-gem/reference/selectors#selector-options",
    
    "relUrl": "/ruby-gem/reference/selectors#selector-options"
  },"99": {
    "doc": "Selectors",
    "title": "Advanced Usage",
    "content": "Categories . To add categories to an item, provide a list of selector names to the categories selector. selectors: genre: selector: \".genre\" branch: selector: \".branch\" categories: - genre - branch . Custom GUID . To create a custom GUID for an item, provide a list of selector names to the guid selector. selectors: title: selector: \"h1\" url: selector: \"a\" extractor: \"href\" guid: - url . Enclosures . To add an enclosure (e.g., an image, audio, or video file) to an item, use the enclosure selector to specify the URL of the file. selectors: items: selector: \".post\" title: selector: \"h2\" enclosure: selector: \"audio\" extractor: \"attribute\" attribute: \"src\" content_type: \"audio/mp3\" . ",
    "url": "/ruby-gem/reference/selectors#advanced-usage",
    
    "relUrl": "/ruby-gem/reference/selectors#advanced-usage"
  },"100": {
    "doc": "Setup for development",
    "title": "Setup for development",
    "content": "Check out the git repository and‚Ä¶ . Using Docker . This approach allows you to experiment without installing Ruby on your machine. All you need to do is install and run Docker. # Build image from Dockerfile and name/tag it as html2rss-web: docker build -t html2rss-web -f Dockerfile . # Run the image and name it html2rss-web-dev: docker run \\ --detach \\ --mount type=bind,source=$(pwd)/config,target=/app/config \\ --name html2rss-web-dev \\ html2rss-web # Open an interactive TTY with the shell `sh`: docker exec -ti html2rss-web-dev sh # Stop and clean up the container docker stop html2rss-web-dev docker rm html2rss-web-dev # Remove the image docker rmi html2rss-web . Using installed Ruby . If you‚Äôre comfortable with installing Ruby directly on your machine, follow these instructions: . | Install Ruby &gt;= 3.2 | gem install bundler foreman | bundle | foreman start | . html2rss-web now listens on port 3000 for requests. ",
    "url": "/web-application/how-to/setup-for-development",
    
    "relUrl": "/web-application/how-to/setup-for-development"
  },"101": {
    "doc": "Scraping a Simple Blog List",
    "title": "Tutorial: Scraping a Simple Blog List",
    "content": "This example demonstrates how to create a feed from a typical blog that has a list of articles on its homepage. ",
    "url": "/ruby-gem/tutorials/simple-blog-list#tutorial-scraping-a-simple-blog-list",
    
    "relUrl": "/ruby-gem/tutorials/simple-blog-list#tutorial-scraping-a-simple-blog-list"
  },"102": {
    "doc": "Scraping a Simple Blog List",
    "title": "The Goal",
    "content": "We want to create an RSS feed that contains the title, link, and summary of each article on the blog. ",
    "url": "/ruby-gem/tutorials/simple-blog-list#the-goal",
    
    "relUrl": "/ruby-gem/tutorials/simple-blog-list#the-goal"
  },"103": {
    "doc": "Scraping a Simple Blog List",
    "title": "The HTML",
    "content": "Here‚Äôs a simplified view of the HTML structure we‚Äôre targeting. The key is to find a container element that wraps each blog post (in this case, .post-item) and then find the selectors for the title, link, and summary within that container. &lt;div class=\"posts\"&gt; &lt;div class=\"post-item\"&gt; &lt;h2 class=\"post-title\"&gt;&lt;a href=\"/blog/post-1\"&gt;First Post Title&lt;/a&gt;&lt;/h2&gt; &lt;p class=\"post-summary\"&gt;Summary of the first post...&lt;/p&gt; &lt;/div&gt; &lt;div class=\"post-item\"&gt; &lt;h2 class=\"post-title\"&gt;&lt;a href=\"/blog/post-2\"&gt;Second Post Title&lt;/a&gt;&lt;/h2&gt; &lt;p class=\"post-summary\"&gt;Summary of the second post...&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; . ",
    "url": "/ruby-gem/tutorials/simple-blog-list#the-html",
    
    "relUrl": "/ruby-gem/tutorials/simple-blog-list#the-html"
  },"104": {
    "doc": "Scraping a Simple Blog List",
    "title": "The Configuration",
    "content": "This configuration uses the selectors scraper to precisely extract the content we want. channel: url: https://example.com/blog selectors: items: selector: \".post-item\" title: selector: \".post-title a\" url: selector: \".post-title a\" extractor: \"href\" description: selector: \".post-summary\" . Configuration Breakdown . | items.selector: \".post-item\": This is the most important selector. It tells html2rss that every element with the class post-item is a single item in the RSS feed. | title.selector: \".post-title a\": Within each .post-item, this finds the &lt;a&gt; tag inside the element with the class post-title. | url.selector: \".post-title a\": This finds the same &lt;a&gt; tag. | url.extractor: \"href\": This extracts the URL from the href attribute of the &lt;a&gt; tag. | description.selector: \".post-summary\": This finds the element with the class post-summary. | . ",
    "url": "/ruby-gem/tutorials/simple-blog-list#the-configuration",
    
    "relUrl": "/ruby-gem/tutorials/simple-blog-list#the-configuration"
  },"105": {
    "doc": "Scraping a Simple Blog List",
    "title": "Scraping a Simple Blog List",
    "content": " ",
    "url": "/ruby-gem/tutorials/simple-blog-list",
    
    "relUrl": "/ruby-gem/tutorials/simple-blog-list"
  },"106": {
    "doc": "Sponsoring",
    "title": "Sponsoring html2rss",
    "content": "html2rss is an open-source project, and its development is made possible by the support of our community. If you find html2rss useful, please consider sponsoring the project. ",
    "url": "/get-involved/sponsoring#sponsoring-html2rss",
    
    "relUrl": "/get-involved/sponsoring#sponsoring-html2rss"
  },"107": {
    "doc": "Sponsoring",
    "title": "Why Sponsor?",
    "content": ". | Ensure the project‚Äôs longevity: Your sponsorship helps to ensure that the project remains actively maintained and developed. | Support new features: Your contribution will help to fund the development of new features and improvements. | Show your appreciation: Sponsoring is a great way to show your appreciation for the project and the work that goes into it. | . ",
    "url": "/get-involved/sponsoring#why-sponsor",
    
    "relUrl": "/get-involved/sponsoring#why-sponsor"
  },"108": {
    "doc": "Sponsoring",
    "title": "How to Sponsor",
    "content": "You can sponsor the project through GitHub Sponsors. ",
    "url": "/get-involved/sponsoring#how-to-sponsor",
    
    "relUrl": "/get-involved/sponsoring#how-to-sponsor"
  },"109": {
    "doc": "Sponsoring",
    "title": "Sponsoring",
    "content": " ",
    "url": "/get-involved/sponsoring",
    
    "relUrl": "/get-involved/sponsoring"
  },"110": {
    "doc": "Strategy",
    "title": "Strategy",
    "content": "The strategy key defines how html2rss fetches a website‚Äôs content. | faraday (default): Makes a direct HTTP request. It is fast but does not execute JavaScript. | browserless: Renders the website in a headless Chrome browser, which is necessary for JavaScript-heavy sites. | . ",
    "url": "/ruby-gem/reference/strategy",
    
    "relUrl": "/ruby-gem/reference/strategy"
  },"111": {
    "doc": "Strategy",
    "title": "browserless",
    "content": "To use the browserless strategy, you need a running instance of Browserless.io. Docker . You can run a local Browserless.io instance using Docker: . docker run \\ --rm \\ -p 3000:3000 \\ -e \"CONCURRENT=10\" \\ -e \"TOKEN=6R0W53R135510\" \\ ghcr.io/browserless/chromium . Configuration . Set the strategy to browserless in your feed configuration: . strategy: browserless . Command-Line Usage . You can also specify the strategy on the command line: . # Set environment variables for your Browserless.io instance BROWSERLESS_IO_WEBSOCKET_URL=\"ws://127.0.0.1:3000\" BROWSERLESS_IO_API_TOKEN=\"6R0W53R135510\" # Use the browserless strategy html2rss feed --strategy=browserless my_config.yml . ",
    "url": "/ruby-gem/reference/strategy#browserless",
    
    "relUrl": "/ruby-gem/reference/strategy#browserless"
  },"112": {
    "doc": "Stylesheets",
    "title": "Stylesheets",
    "content": "The stylesheets key allows you to add CSS or XSLT stylesheets to your RSS feed, improving its appearance in web browsers. ",
    "url": "/ruby-gem/reference/stylesheets",
    
    "relUrl": "/ruby-gem/reference/stylesheets"
  },"113": {
    "doc": "Stylesheets",
    "title": "Configuration",
    "content": "You can add multiple stylesheets to your configuration: . stylesheets: - href: \"/path/to/style.xsl\" media: \"all\" type: \"text/xsl\" - href: \"https://example.com/rss.css\" media: \"all\" type: \"text/css\" . ",
    "url": "/ruby-gem/reference/stylesheets#configuration",
    
    "relUrl": "/ruby-gem/reference/stylesheets#configuration"
  },"114": {
    "doc": "Stylesheets",
    "title": "Further Reading",
    "content": ". | How to Format RSS with CSS | XSLT: Extensible Stylesheet Language Transformations | . ",
    "url": "/ruby-gem/reference/stylesheets#further-reading",
    
    "relUrl": "/ruby-gem/reference/stylesheets#further-reading"
  },"115": {
    "doc": "Styling Your RSS Feed",
    "title": "Styling Your RSS Feed",
    "content": "You can make your RSS feed look good in a web browser by attaching stylesheets. ",
    "url": "/ruby-gem/how-to/styling-rss-feed",
    
    "relUrl": "/ruby-gem/how-to/styling-rss-feed"
  },"116": {
    "doc": "Styling Your RSS Feed",
    "title": "Solution",
    "content": "Add stylesheets to your feed configuration. ",
    "url": "/ruby-gem/how-to/styling-rss-feed#solution",
    
    "relUrl": "/ruby-gem/how-to/styling-rss-feed#solution"
  },"117": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": "This guide provides solutions to common issues encountered when using html2rss. ",
    "url": "/support/troubleshooting",
    
    "relUrl": "/support/troubleshooting"
  },"118": {
    "doc": "Troubleshooting",
    "title": "Essential Tools",
    "content": "Your browser‚Äôs developer tools are essential for troubleshooting. Use them to inspect the HTML structure of a webpage and find the correct CSS selectors. | To open: Right-click an element on a webpage and select ‚ÄúInspect‚Äù or ‚ÄúInspect Element.‚Äù | . ",
    "url": "/support/troubleshooting#essential-tools",
    
    "relUrl": "/support/troubleshooting#essential-tools"
  },"119": {
    "doc": "Troubleshooting",
    "title": "Common Issues",
    "content": "Empty Feeds . If your feed is empty, check the following: . | URL: Ensure the url in your configuration is correct and accessible. | items.selector: Verify that the items.selector matches the elements on the page. | Website Changes: Websites change their HTML structure frequently. Your selectors may be outdated. | . Missing Item Parts . If parts of your items (e.g., title, link) are missing, check the following: . | Selector: Ensure the selector for the missing part is correct and relative to the items.selector. | Extractor: Verify that you are using the correct extractor (e.g., text, href, attribute). | Dynamic Content: html2rss does not execute JavaScript. If the content is loaded dynamically, html2rss may not be able to see it. | . Date/Time Parsing Errors . If you are having issues with date/time parsing, check the following: . | time_format: Ensure the time_format in your configuration matches the date string on the website. | time_zone: Specify the correct time_zone if the website uses a specific time zone. | . html2rss Command Not Found . If you are getting a ‚Äúcommand not found‚Äù error, try the following: . | Re-install: Re-install html2rss to ensure it is installed correctly: gem install html2rss. | Check PATH: Ensure that the directory where Ruby gems are installed is in your system‚Äôs PATH. | . ",
    "url": "/support/troubleshooting#common-issues",
    
    "relUrl": "/support/troubleshooting#common-issues"
  },"120": {
    "doc": "Troubleshooting",
    "title": "Tips &amp; Tricks",
    "content": ". | Mobile Redirects: Check that the channel URL does not redirect to a mobile page with a different markup structure. | curl and pup: For static sites, use curl and pup to quickly find selectors: curl URL | pup. | CSS Selectors: For a comprehensive overview of CSS selectors, see the W3C documentation. | . ",
    "url": "/support/troubleshooting#tips--tricks",
    
    "relUrl": "/support/troubleshooting#tips--tricks"
  },"121": {
    "doc": "Troubleshooting",
    "title": "Still Stuck?",
    "content": "If you are still having issues, please open an issue on GitHub. ",
    "url": "/support/troubleshooting#still-stuck",
    
    "relUrl": "/support/troubleshooting#still-stuck"
  },"122": {
    "doc": "Use automatic feed generation",
    "title": "Automatic Feed Generation",
    "content": "This feature lets you create RSS feeds automatically - just enter a website URL and html2rss-web figures out the rest! . Note: This feature is disabled by default for security reasons. ",
    "url": "/web-application/how-to/use-automatic-feed-generation#automatic-feed-generation",
    
    "relUrl": "/web-application/how-to/use-automatic-feed-generation#automatic-feed-generation"
  },"123": {
    "doc": "Use automatic feed generation",
    "title": "How to Enable It",
    "content": ". | Edit your docker-compose.yml file and uncomment these lines: | . environment: AUTO_SOURCE_ENABLED: \"true\" AUTO_SOURCE_USERNAME: your-username AUTO_SOURCE_PASSWORD: your-secure-password AUTO_SOURCE_ALLOWED_ORIGINS: 127.0.0.1:3000 . | Restart html2rss-web: | . docker compose down docker compose up -d . ",
    "url": "/web-application/how-to/use-automatic-feed-generation#how-to-enable-it",
    
    "relUrl": "/web-application/how-to/use-automatic-feed-generation#how-to-enable-it"
  },"124": {
    "doc": "Use automatic feed generation",
    "title": "How to Use It",
    "content": ". | Open the auto-source page: Go to http://localhost:3000/auto_source/ | Enter your credentials (the username and password you set above) | Enter a website URL and click ‚ÄúGenerate‚Äù | Get your RSS feed! html2rss-web will create a feed automatically | . That‚Äôs it! No configuration files needed - html2rss-web does all the work for you. ",
    "url": "/web-application/how-to/use-automatic-feed-generation#how-to-use-it",
    
    "relUrl": "/web-application/how-to/use-automatic-feed-generation#how-to-use-it"
  },"125": {
    "doc": "Use automatic feed generation",
    "title": "Use automatic feed generation",
    "content": " ",
    "url": "/web-application/how-to/use-automatic-feed-generation",
    
    "relUrl": "/web-application/how-to/use-automatic-feed-generation"
  },"126": {
    "doc": "Use in production",
    "title": "Use in production",
    "content": "This app is published on Docker Hub and therefore easy to use with Docker. The above docker-compose.yml is a good starting point. If you‚Äôre going to host a public instance, please, please, please: . | Put the application behind a reverse proxy. | Allow outside connections only via HTTPS. | Have an auto-update strategy (e.g., watchtower). | Monitor your /health_check.txt endpoint. | Let the world know and add your instance to the wiki ‚Äì thank you! | . ",
    "url": "/web-application/how-to/use-in-production",
    
    "relUrl": "/web-application/how-to/use-in-production"
  },"127": {
    "doc": "Use the included configs",
    "title": "Using Pre-Made Feeds",
    "content": "html2rss-web comes with hundreds of ready-made feeds for popular websites! No configuration needed - just use the URLs. ",
    "url": "/web-application/how-to/use-included-configs#using-pre-made-feeds",
    
    "relUrl": "/web-application/how-to/use-included-configs#using-pre-made-feeds"
  },"128": {
    "doc": "Use the included configs",
    "title": "How to Use Them",
    "content": ". | Find a feed in the Feed Directory | Copy the URL (it looks like domainname.tld/whatever.rss) | Add it to your feed reader - paste the URL and you‚Äôre done! | . ",
    "url": "/web-application/how-to/use-included-configs#how-to-use-them",
    
    "relUrl": "/web-application/how-to/use-included-configs#how-to-use-them"
  },"129": {
    "doc": "Use the included configs",
    "title": "Example",
    "content": "If you see a config file named example.com/news.yml, you can access it at: http://localhost:3000/example.com/news.rss . Just replace localhost:3000 with your html2rss-web address. ",
    "url": "/web-application/how-to/use-included-configs#example",
    
    "relUrl": "/web-application/how-to/use-included-configs#example"
  },"130": {
    "doc": "Use the included configs",
    "title": "Use the included configs",
    "content": " ",
    "url": "/web-application/how-to/use-included-configs",
    
    "relUrl": "/web-application/how-to/use-included-configs"
  },"131": {
    "doc": "Versioning and releases",
    "title": "Versioning and releases",
    "content": "This web application is distributed in a rolling release fashion from the master branch. For the latest commit passing GitHub CI/CD on the master branch, an updated Docker image will be pushed to Docker Hub: gilcreator/html2rss-web. The SBOM is embedded in the Docker image. GitHub‚Äôs @dependabot is enabled for dependency updates and they are automatically merged to the master branch when the CI gives the green light. If you use Docker, you should update to the latest image automatically by setting up watchtower as described. ",
    "url": "/web-application/reference/versioning-and-releases",
    
    "relUrl": "/web-application/reference/versioning-and-releases"
  },"132": {
    "doc": "Your First Feed",
    "title": "Your First Feed: A Step-by-Step Guide",
    "content": "Welcome to html2rss! This guide will walk you through creating your first RSS feed. We‚Äôll start with the easiest method and gradually introduce more powerful options. ",
    "url": "/ruby-gem/tutorials/your-first-feed#your-first-feed-a-step-by-step-guide",
    
    "relUrl": "/ruby-gem/tutorials/your-first-feed#your-first-feed-a-step-by-step-guide"
  },"133": {
    "doc": "Your First Feed",
    "title": "Step 1: The ‚ÄúNo-Config‚Äù Method (auto)",
    "content": "The easiest way to create a feed is with the auto command. It requires no configuration file and intelligently scrapes the page to find content. Open your terminal and run this command: . html2rss auto https://unmatchedstyle.com/ . html2rss will analyze the website and generate an RSS feed for you, printing it directly to the console. This is a great way to see if html2rss can automatically handle your target website. Is the result not quite right? Let‚Äôs move to the next step. ",
    "url": "/ruby-gem/tutorials/your-first-feed#step-1-the-no-config-method-auto",
    
    "relUrl": "/ruby-gem/tutorials/your-first-feed#step-1-the-no-config-method-auto"
  },"134": {
    "doc": "Your First Feed",
    "title": "Step 2: The ‚ÄúFull Control‚Äù Method (selectors)",
    "content": "When you need to extract content with precision, the selectors scraper is the tool for the job. This method gives you complete control over what content is included in your feed by using CSS selectors. Let‚Äôs create a feed for Stack Overflow‚Äôs ‚ÄúHot Network Questions‚Äù. | Create a file named stackoverflow.yml. | Add the following content: . channel: url: https://stackoverflow.com/questions selectors: items: selector: \"#hot-network-questions &gt; ul &gt; li\" title: selector: \"a\" url: selector: \"a\" extractor: \"href\" . | Run the feed command: . html2rss feed stackoverflow.yml . | . This configuration tells html2rss: . | The main container for all items is &lt;ul id=\"hot-network-questions\"&gt;. | Each item is inside a &lt;li&gt; tag. | The title of each item is the text of the &lt;a&gt; tag. | The url of each item is the href attribute of the &lt;a&gt; tag. | . This is just the beginning! From here, you can dive deep into the full range of configuration options to create the perfect feed. ",
    "url": "/ruby-gem/tutorials/your-first-feed#step-2-the-full-control-method-selectors",
    
    "relUrl": "/ruby-gem/tutorials/your-first-feed#step-2-the-full-control-method-selectors"
  },"135": {
    "doc": "Your First Feed",
    "title": "Your First Feed",
    "content": " ",
    "url": "/ruby-gem/tutorials/your-first-feed",
    
    "relUrl": "/ruby-gem/tutorials/your-first-feed"
  }
}
