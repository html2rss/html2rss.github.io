---
import { configs } from "../data/loadConfigs";
import { Icon, LinkButton } from "@astrojs/starlight/components";

// Simple helper functions
function getFeedUrl(
  config: {
    domain: string;
    name: string;
    url_parameters?: Record<string, any>;
  },
  instanceUrl: string,
  params: Record<string, string> = {},
) {
  const baseUrl = instanceUrl.endsWith("/") ? instanceUrl : `${instanceUrl}/`;
  let url = `${baseUrl}${config.domain}/${config.name}.rss`;

  const queryParams = new URLSearchParams();
  Object.keys(config.url_parameters || {}).forEach((key) => {
    if (params[key]) queryParams.append(key, params[key]);
  });

  const queryString = queryParams.toString();
  if (queryString) url += `?${queryString}`;
  return url;
}

// Don't generate static URLs to avoid exposing instance URL in build
const staticFeedUrls = configs.map((config) => ({
  ...config,
  staticFeedUrl: "#", // Placeholder that will be updated by JavaScript
}));
---

<div class="container">
  <!-- Progressive Enhancement: Works without JavaScript -->
  <div class="filters">
    <label for="instance-url-input">Instance URL</label>
    <input
      type="text"
      name="instance"
      id="instance-url-input"
      class="input"
      aria-label="Instance URL"
      placeholder="https://your-instance.com"
    />

    <label for="search-input">Search Feeds</label>
    <input
      type="search"
      name="search"
      id="search-input"
      autofocus
      placeholder="fia, apple, news or blog"
      class="input"
      aria-label="Search feeds"
    />
  </div>

  <div class="feed-list">
    {
      staticFeedUrls.map((config, index) => (
        <div
          class="feed-item"
          data-domain={config.domain}
          data-name={config.name}
          data-searchable={`${config.domain}/${config.name}`}
        >
          <div class="feed-main">
            <div class="feed-info">
              <div class="feed-title">
                <>
                  <span class="domain">{config.domain}</span>
                  <span class="separator">/</span>
                  <span class="name">{config.name}</span>
                </>
              </div>

              {config.channel?.url && (
                <div class="source-url">
                  <a
                    href={config.channel.url}
                    target="_blank"
                    rel="noopener noreferrer nofollow"
                    class="source-link"
                  >
                    {config.channel.url}
                  </a>
                </div>
              )}
            </div>

            <div class="actions">
              {!config.valid_channel_url && Object.keys(config.url_parameters || {}).length > 0 ? (
                <button
                  class="configure-button"
                  type="button"
                  aria-expanded="false"
                  aria-controls={`params-${index}`}
                  data-target={`params-${index}`}
                  aria-label="Configure feed parameters"
                  title="Configure feed parameters"
                >
                  <Icon name="setting" />
                  <span>Configure</span>
                </button>
              ) : (
                <div class="action-spacer" />
              )}

              <LinkButton
                href={config.staticFeedUrl}
                target="_blank"
                rel="noopener noreferrer nofollow"
                data-feed-url
                class="action-button rss-button"
                aria-label="Open RSS feed"
                title="Open RSS feed"
              >
                <Icon name="rss" />
                <span>RSS</span>
              </LinkButton>

              <LinkButton
                href={`https://github.com/html2rss/html2rss-configs/edit/master/lib/html2rss/configs/${encodeURIComponent(config.domain)}/${encodeURIComponent(config.name)}.yml`}
                target="_blank"
                rel="noopener noreferrer nofollow"
                variant="secondary"
                class="action-button edit-button"
                aria-label="Edit configuration on GitHub"
                title="Edit configuration on GitHub"
              >
                <Icon name="pencil" />
                <span>Edit</span>
              </LinkButton>
            </div>
          </div>

          {!config.valid_channel_url && Object.keys(config.url_parameters || {}).length > 0 && (
            <div class="parameter-form" id={`params-${index}`} hidden>
              <form class="form">
                {Object.entries(config.url_parameters || {}).map(([key, fallback]) => (
                  <div class="form-group">
                    <label for={`${config.domain}-${config.name}-${key}`} class="form-label">
                      {key}
                    </label>
                    <input
                      type="text"
                      id={`${config.domain}-${config.name}-${key}`}
                      name={key}
                      class="form-input"
                      value={config.default_parameters?.[key] || ""}
                      placeholder={String(fallback)}
                      data-param-key={key}
                      aria-label={key}
                    />
                  </div>
                ))}
                <div class="form-actions">
                  <button
                    type="button"
                    class="close-button"
                    data-close-form
                    aria-label="Close configuration form"
                  >
                    Close
                  </button>
                </div>
              </form>
            </div>
          )}
        </div>
      ))
    }
  </div>
</div>

<!-- Enhanced functionality with vanilla JavaScript -->
<script src="./feed-directory.js"></script>

<style>
  .container {
    margin: 2rem 0;
  }

  /* Filters Section */
  .filters {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: hsl(var(--sl-color-gray-2));
    border: 1px solid hsl(var(--sl-color-gray-4));
    border-radius: 0.5rem;
  }

  .input {
    width: 100%;
    padding: 0.125rem 0.5rem;
    font-family: monospace;
  }

  /* List Layout */
  .feed-list {
    display: flex;
    flex-direction: column;
    gap: 1px;
    background: hsl(var(--sl-color-gray-4));
    border-radius: 0.5rem;
    overflow: hidden;
  }

  .feed-item:hover {
    background: hsl(var(--sl-color-gray-1));
  }

  .feed-title {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
    color: hsl(var(--sl-color-text));
    line-height: 1.3;
  }

  .feed-title,
  .feed-title > span {
    user-select: all;
    white-space: nowrap;
  }

  .domain {
    color: hsl(var(--sl-color-accent-high));
    font-weight: 600;
    user-select: text;
  }

  .separator {
    color: hsl(var(--sl-color-gray-6));
    font-weight: 400;
    user-select: text;
  }

  .name {
    color: hsl(var(--sl-color-text));
    font-weight: 500;
    user-select: text;
  }

  .source-url {
    margin-top: 0.25rem;
    display: none;
  }

  .source-link {
    color: hsl(var(--sl-color-gray-6));
    text-decoration: none;
    font-size: 0.8rem;
    word-break: break-all;
    line-height: 1.2;
  }

  .source-link:hover {
    color: hsl(var(--sl-color-accent-high));
    text-decoration: underline;
  }

  /* Configure Button */
  .configure-button {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    background: hsl(var(--sl-color-gray-1));
    border: 1px solid hsl(var(--sl-color-gray-4));
    border-radius: 0.25rem;
    color: hsl(var(--sl-color-text));
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .configure-button:hover {
    background: hsl(var(--sl-color-gray-2));
    border-color: hsl(var(--sl-color-accent));
  }

  .form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin-top: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .form-label {
    font-size: 0.9rem;
    font-weight: 700;
    color: hsl(var(--sl-color-text));
    margin-bottom: 0.5rem;
    display: block;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .form-input {
    width: 100%;
  }

  .form-actions {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    padding-top: 1rem;
    border-top: 2px solid hsl(var(--sl-color-gray-4));
    margin-top: 1rem;
  }

  .close-button {
    padding: 0.5rem 1rem;
    background: hsl(var(--sl-color-gray-1));
    border: 1px solid hsl(var(--sl-color-gray-4));
    border-radius: 0.25rem;
    color: hsl(var(--sl-color-text));
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .close-button:hover {
    background: hsl(var(--sl-color-gray-2));
    border-color: hsl(var(--sl-color-accent));
  }

  .feed-item {
    display: flex;
    flex-direction: column;
    background: hsl(var(--sl-color-bg));
    padding: 0.5rem;
    transition: all 0.2s ease;
    border-bottom: 1px solid hsl(var(--sl-color-gray-4));
  }

  .feed-item:last-child {
    border-bottom: none;
  }

  .feed-main {
    display: flex;
    flex-direction: column;
  }

  .feed-info {
    order: 1;
  }

  .actions {
    order: 2;
    display: flex;
    flex-direction: row;
    gap: 0.25rem;
    width: 100%;
    justify-content: flex-start;
    align-items: center;
  }

  .action-button {
    flex: none;
    justify-content: center;
    align-items: center;
    padding: 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
  }

  .action-button span {
    display: none;
  }

  .rss-button {
    background: #ff8c00 !important;
    border-color: #ff8c00 !important;
    color: white !important;
  }

  .rss-button:hover {
    background: #ff7700 !important;
    border-color: #ff7700 !important;
    color: white !important;
    transform: translateY(-1px) !important;
  }

  .configure-button {
    flex: none;
    justify-content: center;
    align-items: center;
    padding: 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
  }

  .configure-button span {
    display: none;
  }

  .action-spacer {
    display: none;
  }

  /* Desktop Design */
  @media (min-width: 768px) {
    .filters {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1.5rem;
      margin-bottom: 2rem;
      padding: 1.5rem;
    }

    .feed-item {
      padding: 0;
    }

    .feed-main {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }

    .feed-info {
      order: 1;
      flex: 1;
      min-width: 0;
    }

    .actions {
      order: 2;
      flex-direction: row;
      width: auto;
      flex-shrink: 0;
      align-items: center;
    }

    .action-button {
      width: auto;
      height: 32px;
      font-size: 0.75rem;
      border-radius: 0.25rem;
    }

    .action-button span {
      display: inline;
    }

    .configure-button {
      width: auto;
      height: 32px;
      padding: 0.25rem 0.75rem;
      font-size: 0.75rem;
      border-radius: 0.25rem;
    }

    .configure-button span {
      display: inline;
    }

    .action-spacer {
      display: block;
      width: auto;
      height: 32px;
    }
  }
</style>
