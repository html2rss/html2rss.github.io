---
import { configs } from '../data/loadConfigs';
import { Card, CardGrid, Icon, LinkButton } from '@astrojs/starlight/components';

// Helper functions for URL generation
function getFeedUrl(config: any, instanceUrl: string, params: Record<string, string> = {}) {
  let url = instanceUrl.endsWith("/") ? instanceUrl : `${instanceUrl}/`;
  url += `${config.domain}/${config.name}.rss`;

  const queryParams = new URLSearchParams();
  if (config.url_parameters) {
    for (const key of Object.keys(config.url_parameters)) {
      if (params[key]) {
        queryParams.append(key, params[key]);
      }
    }
  }

  const queryString = queryParams.toString();
  if (queryString) {
    url += `?${queryString}`;
  }

  return url;
}

// Generate static feed URLs for each config (progressive enhancement)
const defaultInstanceUrl = atob("aHR0cHM6Ly8xLmgyci53b3JrZXJzLmRldi8=");
const staticFeedUrls = configs.map(config => ({
  ...config,
  staticFeedUrl: getFeedUrl(config, defaultInstanceUrl)
}));
---

<div class="feed-directory-container">
  <!-- Progressive Enhancement: Works without JavaScript -->
  <div class="feed-directory__filters">
    <div class="feed-directory__filter-group">
      <label for="instance-url" class="feed-directory__label">
        Instance URL
      </label>
      <input
        type="text"
        name="instance"
        id="instance-url"
        class="feed-directory__input"
        value={defaultInstanceUrl}
        aria-label="Instance URL"
        placeholder="https://your-instance.com"
      />
    </div>

    <div class="feed-directory__filter-group">
      <label for="search-input" class="feed-directory__label">
        Search Feeds
      </label>
      <input
        type="search"
        name="search"
        id="search-input"
        autofocus
        placeholder="fia, apple, news or blog"
        class="feed-directory__input"
        aria-label="Search feeds"
      />
    </div>
  </div>

  <div class="feed-directory__list">
    {staticFeedUrls.map((config, index) => (
      <div
        class="feed-directory__item"
        data-domain={config.domain}
        data-name={config.name}
        data-searchable={`${config.domain}/${config.name}`}
      >
        <div class="feed-directory__item-main">
          <div class="feed-directory__item-info">
            <div class="feed-directory__item-title">
              <span class="feed-directory__item-domain">{config.domain}</span>
              <span class="feed-directory__item-separator">/</span>
              <span class="feed-directory__item-name">{config.name}</span>
            </div>

            {config.channel?.url && (
              <div class="feed-directory__item-source">
                <a href={config.channel.url} target="_blank" rel="noopener noreferrer" class="feed-directory__item-link">
                  {config.channel.url}
                </a>
              </div>
            )}
          </div>

          <div class="feed-directory__item-actions">
            {!config.valid_channel_url && Object.keys(config.url_parameters || {}).length > 0 ? (
              <button
                class="feed-directory__configure-btn"
                type="button"
                aria-expanded="false"
                aria-controls={`params-${index}`}
                data-target={`params-${index}`}
                aria-label="Configure feed parameters"
                title="Configure feed parameters"
              >
                <Icon name="setting" />
                <span>Configure</span>
              </button>
            ) : (
              <div class="feed-directory__action-spacer"></div>
            )}

            <LinkButton
              href={config.staticFeedUrl}
              target="_blank"
              data-feed-url
              size="sm"
              class="feed-directory__action-btn feed-directory__action-btn--rss"
              aria-label="Open RSS feed"
              title="Open RSS feed"
            >
              <Icon name="rss" />
              <span>RSS</span>
            </LinkButton>

            <LinkButton
              href={`https://github.com/html2rss/html2rss-configs/blob/master/lib/html2rss/configs/${encodeURIComponent(config.domain)}/${encodeURIComponent(config.name)}.yml`}
              target="_blank"
              variant="secondary"
              size="sm"
              class="feed-directory__action-btn feed-directory__action-btn--edit"
              aria-label="Edit configuration on GitHub"
              title="Edit configuration on GitHub"
            >
              <Icon name="pencil" />
              <span>Edit</span>
            </LinkButton>
          </div>
        </div>

        {!config.valid_channel_url && Object.keys(config.url_parameters || {}).length > 0 && (
          <div class="feed-directory__item-params" id={`params-${index}`} hidden>
            <form class="feed-directory__params-form">
              {Object.entries(config.url_parameters || {}).map(([key, fallback]) => (
                <div class="feed-directory__param-group">
                  <label
                    for={`${config.domain}-${config.name}-${key}`}
                    class="feed-directory__param-label"
                  >
                    {key}
                  </label>
                  <input
                    type="text"
                    id={`${config.domain}-${config.name}-${key}`}
                    name={key}
                    class="feed-directory__param-input"
                    value={config.default_parameters?.[key] || ''}
                    placeholder={String(fallback)}
                    data-param-key={key}
                    aria-label={key}
                  />
                </div>
              ))}
              <div class="feed-directory__params-actions">
                <button type="button" class="" data-close-form>
                  Close
                </button>
              </div>
            </form>
          </div>
        )}
      </div>
    ))}
  </div>
</div>

<!-- Enhanced functionality with vanilla JavaScript -->
<script>
  // Progressive enhancement: Add interactivity without breaking basic functionality
  class FeedDirectory {
    instanceUrl: string;
    searchInput: HTMLInputElement | null;
    feedItems: NodeListOf<HTMLElement>;

    constructor() {
      this.instanceUrl = (document.getElementById('instance-url') as HTMLInputElement)?.value || atob("aHR0cHM6Ly8xLmgyci53b3JrZXJzLmRldi8=");
      this.searchInput = document.getElementById('search-input') as HTMLInputElement;
      this.feedItems = document.querySelectorAll('[data-domain]');

      this.init();
    }

    init() {
      this.setupSearch();
      this.setupInstanceUrl();
      this.setupParameterForms();
    }

    setupSearch() {
      if (!this.searchInput) return;

      this.searchInput.addEventListener('input', (e: Event) => {
        const target = e.target as HTMLInputElement;
        const query = target.value.toLowerCase();
        this.filterItems(query);
      });
    }

    setupInstanceUrl() {
      const instanceInput = document.getElementById('instance-url') as HTMLInputElement;
      if (!instanceInput) return;

      instanceInput.addEventListener('input', (e: Event) => {
        const target = e.target as HTMLInputElement;
        this.instanceUrl = target.value;
        this.updateFeedUrls();
      });
    }

    setupParameterForms() {
      // Toggle parameter forms
      document.querySelectorAll('.feed-directory__configure-btn').forEach(button => {
        button.addEventListener('click', (e: Event) => {
          const target = e.target as HTMLElement;
          const buttonElement = target.closest('button') as HTMLButtonElement;
          const targetId = buttonElement.dataset.target;
          const form = document.getElementById(targetId!) as HTMLElement;
          const isExpanded = form.hidden === false;

          form.hidden = isExpanded;
          buttonElement.setAttribute('aria-expanded', String(!isExpanded));
          const span = buttonElement.querySelector('span') as HTMLElement;
          if (span) span.textContent = isExpanded ? 'Configure' : 'Hide';
        });
      });

      // Close parameter forms
      document.querySelectorAll('[data-close-form]').forEach(button => {
        button.addEventListener('click', (e: Event) => {
          const target = e.target as HTMLElement;
          const form = target.closest('.feed-directory__item-params') as HTMLElement;
          const toggle = document.querySelector(`[data-target="${form.id}"]`) as HTMLElement;

          form.hidden = true;
          toggle.setAttribute('aria-expanded', 'false');
          const span = toggle.querySelector('span') as HTMLElement;
          if (span) span.textContent = 'Configure';
        });
      });

      // Update feed URLs when parameters change
      document.querySelectorAll('.feed-directory__param-input').forEach(input => {
        input.addEventListener('input', () => {
          this.updateFeedUrls();
        });
      });
    }

    filterItems(query: string) {
      this.feedItems.forEach((item: HTMLElement) => {
        const searchableText = item.dataset.searchable?.toLowerCase() || '';
        const matches = this.fuzzyMatch(searchableText, query);
        item.style.display = matches ? 'flex' : 'none';
      });
    }

    fuzzyMatch(text: string, query: string): boolean {
      const lowerText = text.toLowerCase();
      const lowerQuery = query.toLowerCase();
      let textIndex = 0;
      let queryIndex = 0;

      while (queryIndex < lowerQuery.length && textIndex < lowerText.length) {
        if (lowerQuery[queryIndex] === lowerText[textIndex]) {
          queryIndex++;
        }
        textIndex++;
      }
      return queryIndex === lowerQuery.length;
    }

    updateFeedUrls() {
      document.querySelectorAll('[data-feed-url]').forEach(link => {
        const linkElement = link as HTMLAnchorElement;
        const item = linkElement.closest('[data-domain]') as HTMLElement;
        const domain = item.dataset.domain;
        const name = item.dataset.name;

        // Get parameters from form inputs (including prefilled defaults)
        const params: Record<string, string> = {};
        const paramInputs = item.querySelectorAll('[data-param-key]');
        paramInputs.forEach(input => {
          const inputElement = input as HTMLInputElement;
          if (inputElement.value) {
            params[inputElement.dataset.paramKey!] = inputElement.value;
          }
        });

        // Generate new URL
        let url = this.instanceUrl.endsWith("/") ? this.instanceUrl : `${this.instanceUrl}/`;
        url += `${domain}/${name}.rss`;

        const queryParams = new URLSearchParams();
        Object.entries(params).forEach(([key, value]) => {
          queryParams.append(key, value);
        });

        const queryString = queryParams.toString();
        if (queryString) {
          url += `?${queryString}`;
        }

        linkElement.href = url;
      });
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new FeedDirectory());
  } else {
    new FeedDirectory();
  }
</script>


<style>
  .feed-directory-container {
    margin: 2rem 0;
  }

  /* Filters Section */
  .feed-directory__filters {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: hsl(var(--sl-color-gray-2));
    border: 1px solid hsl(var(--sl-color-gray-4));
    border-radius: 0.75rem;
  }

  .feed-directory__filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .feed-directory__label {
    font-weight: 600;
    font-size: 0.875rem;
    color: hsl(var(--sl-color-gray-6));
    margin: 0;
  }

  .feed-directory__input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid hsl(var(--sl-color-gray-4));
    border-radius: 0.5rem;
    background: hsl(var(--sl-color-bg));
    color: hsl(var(--sl-color-text));
    font-size: 0.875rem;
    transition: border-color 0.2s ease;
  }

  .feed-directory__input:focus {
    outline: none;
    border-color: hsl(var(--sl-color-accent));
    box-shadow: 0 0 0 3px hsl(var(--sl-color-accent) / 0.1);
  }

  /* List Layout */
  .feed-directory__list {
    display: flex;
    flex-direction: column;
    gap: 1px;
    background: hsl(var(--sl-color-gray-4));
    border-radius: 0.5rem;
    overflow: hidden;
  }

  .feed-directory__item:hover {
    background: hsl(var(--sl-color-gray-1));
  }

  .feed-directory__item-title {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
    color: hsl(var(--sl-color-text));
    line-height: 1.3;
  }

  .feed-directory__item-domain {
    color: hsl(var(--sl-color-accent-high));
    font-weight: 600;
  }

  .feed-directory__item-separator {
    color: hsl(var(--sl-color-gray-6));
    font-weight: 400;
  }

  .feed-directory__item-name {
    color: hsl(var(--sl-color-text));
    font-weight: 500;
  }

  .feed-directory__item-source {
    margin-top: 0.25rem;
  }

  .feed-directory__item-link {
    color: hsl(var(--sl-color-gray-6));
    text-decoration: none;
    font-size: 0.8rem;
    word-break: break-all;
    line-height: 1.2;
  }

  .feed-directory__item-link:hover {
    color: hsl(var(--sl-color-accent-high));
    text-decoration: underline;
  }

  /* Configure Button */
  .feed-directory__configure-btn {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    background: hsl(var(--sl-color-gray-1));
    border: 1px solid hsl(var(--sl-color-gray-4));
    border-radius: 0.25rem;
    color: hsl(var(--sl-color-text));
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .feed-directory__configure-btn:hover {
    background: hsl(var(--sl-color-gray-2));
    border-color: hsl(var(--sl-color-accent));
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .feed-directory__params-form {
    display: flex ;
    flex-direction: column ;
    gap: 1.5rem ;
    margin-top: 1rem ;
  }

  .feed-directory__param-group {
    display: flex ;
    flex-direction: column ;
    gap: 0.75rem ;
  }

  .feed-directory__param-label {
    font-size: 0.9rem ;
    font-weight: 700 ;
    color: hsl(var(--sl-color-text)) ;
    margin-bottom: 0.5rem ;
    display: block ;
    text-transform: uppercase ;
    letter-spacing: 0.025em ;
  }

  .feed-directory__params-actions {
    display: flex ;
    justify-content: flex-end ;
    align-items: center ;
    padding-top: 1rem ;
    border-top: 2px solid hsl(var(--sl-color-gray-4)) ;
    margin-top: 1rem ;
  }

  /* Mobile-First Design */
  .feed-directory__filters {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: hsl(var(--sl-color-gray-2));
    border: 1px solid hsl(var(--sl-color-gray-4));
    border-radius: 0.5rem;
  }

  .feed-directory__item {
    display: flex;
    flex-direction: column;
    background: hsl(var(--sl-color-bg));
    padding: 1rem;
    transition: all 0.2s ease;
    border-bottom: 1px solid hsl(var(--sl-color-gray-4));
  }

  .feed-directory__item:last-child {
    border-bottom: none;
  }

  .feed-directory__item-main {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .feed-directory__item-info {
    order: 1;
  }

  .feed-directory__item-actions {
    order: 2;
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
    width: 100%;
    justify-content: flex-start;
  }

  .feed-directory__action-btn {
    flex: none;
    justify-content: center;
    padding: 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    width: 36px;
    height: 36px;
  }

  .feed-directory__action-btn span {
    display: none;
  }

  .feed-directory__action-btn--rss {
    background: #ff8c00 !important;
    border-color: #ff8c00 !important;
    color: white !important;
  }

  .feed-directory__action-btn--rss:hover {
    background: #ff7700 !important;
    border-color: #ff7700 !important;
    color: white !important;
    transform: translateY(-1px) !important;
  }

  .feed-directory__configure-btn {
    flex: none;
    justify-content: center;
    padding: 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    width: 36px;
    height: 36px;
  }

  .feed-directory__configure-btn span {
    display: none;
  }

  .feed-directory__action-spacer {
    display: none;
  }

  /* Desktop Design */
  @media (min-width: 768px) {
    .feed-directory__filters {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1.5rem;
      margin-bottom: 2rem;
      padding: 1.5rem;
    }

    .feed-directory__item {
      padding: 0.75rem 1rem;
    }

    .feed-directory__item-main {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      gap: 1rem;
    }

    .feed-directory__item-info {
      order: 1;
      flex: 1;
      min-width: 0;
    }

    .feed-directory__item-actions {
      order: 2;
      flex-direction: row;
      gap: 0.5rem;
      width: auto;
      flex-shrink: 0;
      align-items: center;
    }

    .feed-directory__action-btn {
      width: 60px;
      height: 24px;
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
    }

    .feed-directory__action-btn span {
      display: inline;
    }

    .feed-directory__configure-btn {
      width: 60px;
      height: 24px;
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
    }

    .feed-directory__configure-btn span {
      display: inline;
    }

    .feed-directory__action-spacer {
      display: block;
      width: 60px;
      height: 24px;
    }
  }
</style>
